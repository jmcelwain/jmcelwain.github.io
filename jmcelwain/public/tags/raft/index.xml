<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Raft on Blog</title>
    <link>https://jmcelwa.in/tags/raft/</link>
    <description>Recent content in Raft on Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <lastBuildDate>Fri, 07 Dec 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://jmcelwa.in/tags/raft/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>A Raft State Machine in Rust</title>
      <link>https://jmcelwa.in/posts/raft-rust/</link>
      <pubDate>Fri, 07 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>https://jmcelwa.in/posts/raft-rust/</guid>
      <description>Implementing Raft in Rust In idiomatic OO Java, a simplistic state machine for Raft could be written something like:
class Raft { enum State { Follower, Candidate, Leader } // Votes we&amp;#39;ve received from other nodes  private Map&amp;lt;Long, Boolean&amp;gt; votes; // Our current state  private State state = State.Follower; public void apply(VoteMessage message) { if (this.state != Candidate) { throw new InvalidStateException(&amp;#34;Only candidates can receive votes!&amp;#34;); } votes.</description>
    </item>
    
  </channel>
</rss>